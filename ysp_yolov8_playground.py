# -*- coding: utf-8 -*-
"""YSP_YOLOV8_Playground.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AtFWXbd-EAF0SxvW_yozOLgLhn0hdTWK
"""

#splits original images into train and test set
from google.colab import drive
import os
import random
import shutil

drive.mount('/content/drive')


dataset_path = '/content/drive/MyDrive/your_dataset_folder'
train_path = '/content/drive/MyDrive/training_folder'
test_path = '/content/drive/MyDrive/testing_folder'


split_ratio = 0.8  # 80% for training, 20% for testing

os.makedirs(train_path, exist_ok=True)
os.makedirs(test_path, exist_ok=True)

file_list = os.listdir(dataset_path)

random.shuffle(file_list)

split_index = int(len(file_list) * split_ratio)

train_files = file_list[:split_index]
test_files = file_list[split_index:]

for file in train_files:
    src = os.path.join(dataset_path, file)
    dst = os.path.join(train_path, file)
    shutil.move(src, dst)

for file in test_files:
    src = os.path.join(dataset_path, file)
    dst = os.path.join(test_path, file)
    shutil.move(src, dst)

print(f"Total files: {len(file_list)}")
print(f"Training files: {len(train_files)}")
print(f"Testing files: {len(test_files)}")

#splits train set into training and validation set
source_folder = '/content/drive/MyDrive/Colab Notebooks/Pytorch_Playground/datasets/CNN_Train_Data/train/images/'
destination_folder = '/content/drive/MyDrive/Colab Notebooks/Pytorch_Playground/datasets/CNN_Train_Data/val/images/'

os.makedirs(destination_folder, exist_ok=True)

file_list = os.listdir(source_folder)
remove_count = int(len(file_list) * 0.5)
random.shuffle(file_list)
remove_files = file_list[:remove_count]

for file in remove_files:
    src = os.path.join(source_folder, file)
    dst = os.path.join(destination_folder, file)
    shutil.move(src, dst)

#adds the labels into their respective folders

source_folder = '/content/drive/MyDrive/Colab Notebooks/Pytorch_Playground/datasets/CNN_Train_Data/labels/'
destination_folder = '/content/drive/MyDrive/Colab Notebooks/Pytorch_Playground/datasets/CNN_Train_Data/val/labels/'
test_folder = '/content/drive/MyDrive/Colab Notebooks/Pytorch_Playground/datasets/CNN_Train_Data/val/images/'

source_files = os.listdir(source_folder)
destination_files = os.listdir(destination_folder)
test_files = os.listdir(test_folder)

for file in source_files:
  for file2 in test_files:
    if file[:-4] == file2[:-4]:
        src = os.path.join(source_folder, file)
        dst = os.path.join(destination_folder, file)
        shutil.move(src, dst)
        print(f"File '{file}' moved to the destination folder.")

destination_files = os.listdir(destination_folder)
print(f"Files in the destination folder: {destination_files}")

throw an error on purpose

from google.colab import drive
drive.mount('/content/drive')
import os

gdrive_path = "/content/drive/MyDrive/"
initial_default_path = "Colab Notebooks/Pytorch_Playground" # if different, please change the initial_default_path to the path where your actual folder is
os.chdir(gdrive_path + initial_default_path)

"""Install anything into the environment as needed."""

!pip3 install ultralytics
!pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
!pip3 install torchinfo
import glob
import cv2
from ultralytics import YOLO

"""Perform more imports."""

import time
import numpy as np
import torch
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
from torch.utils.data import DataLoader, TensorDataset, Dataset
import h5py
import matplotlib.pyplot as plt
import matplotlib.tri as mtri
#import dnn_app_utils_v3 as du
from skimage.transform import rescale, resize, downscale_local_mean
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from mpl_toolkits.mplot3d import Axes3D
# refresh 'planar_utils' module
import imp
from sklearn.preprocessing import StandardScaler, MinMaxScaler
from sklearn.model_selection import train_test_split
from torchvision import models
from torchinfo import summary

import os

model = YOLO('yolov8n.yaml').load('yolov8n.pt')
model.train(data='ysp.yaml', epochs=, imgsz=640)

import torch
torch.save(model.state_dict(), 'trained_yolo_model.pth')